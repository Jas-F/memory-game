{"version":3,"sources":["components/Jumbotron/Jumbo.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbo","Jumbotron","fluid","IMG","Game","props","state","clickedImages","score","gameOver","arr","arrayToDisplay","sort","Math","random","console","log","this","length","Row","className","map","item","src","onClick","includes","newState","setState","push","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAmBeA,MAdf,WACI,OACI,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,sCACI,6CACA,sH,8CCLVC,EAAM,CAAC,YAAa,aAAc,eAAgB,WAAY,aAAc,SAAU,SAAU,aAsFvFC,E,kDAjFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,cAAe,GACfC,MAAO,EACPC,UAAU,GALC,E,0CASnB,WAAU,IAIgBC,EAJjB,OAEDC,IAEkBD,EAFYP,GAM1BS,MAAK,kBAAMC,KAAKC,SAAW,MAExBJ,GAMX,OADAK,QAAQC,IAAIC,KAAKX,OAIb,cAFA,CAEA,uBAEI,wCAAWW,KAAKX,MAAMC,cAAcW,UAEnCD,KAAKX,MAAMG,UAAY,2CACxB,cAACU,EAAA,EAAD,CAAKC,UAAU,UAAf,UAEMH,KAAKX,MAAMG,UACTE,EAAeU,KAAI,SAAAC,GACf,OAGI,aAFA,CAEA,OAAKF,UAAU,eAAf,SAII,qBAAKG,IAAG,8BAAyBD,GAAQE,QAAS,WAM9C,GAAI,EAAKlB,MAAMC,cAAckB,SAASH,GAAO,CAGzC,IAAII,EAAQ,eAAQ,EAAKpB,OACzBoB,EAASjB,UAAW,EACpBiB,EAASlB,MAAQ,EACjB,EAAKmB,SAASD,OAEX,CAEH,IAAIA,EAAQ,eAAQ,EAAKpB,OAEzBoB,EAASnB,cAAcqB,KAAKN,GAC5B,EAAKK,SAASD,qB,GAlEvCG,IAAMC,WC6BVC,MATf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCnBSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c48e28c.chunk.js","sourcesContent":["// import react and bootstrap\r\nimport React from \"react\";\r\nimport { Jumbotron } from \"react-bootstrap\";\r\n// add jumbotron function\r\n\r\nfunction Jumbo() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <container>\r\n                <h1>Clicky Game</h1>\r\n                <h3>Click on an image to score points, click on the same image twice and you loose</h3>\r\n            </container>\r\n        </Jumbotron>\r\n    )\r\n\r\n\r\n}\r\n// create react component\r\n\r\nexport default Jumbo;","// import react and bootstrap\r\nimport React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\n// create array of images from public folder\r\nconst IMG = [\"cuban.jpg\", \"kieser.jpg\", \"kiyosaki.jpg\", \"musk.jpg\", \"buffet.jpg\", \"cj.jpg\", \"ma.jpg\", \"pauly.jpg\"]\r\n// create grid class with react component\r\nclass Game extends React.Component {\r\n    // build constructor with original state of image array and score\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            clickedImages: [],\r\n            score: 0,\r\n            gameOver: false\r\n        }\r\n    }\r\n    // render images\r\n    render() {\r\n        // suffle array when clicked and gameover = false\r\n        var arrayToDisplay = shuffleArray(IMG)\r\n\r\n        function shuffleArray(arr) {\r\n            // grab array then sort the array using a math.random method\r\n            // create sort function that compares the math. random number with a decimal\r\n            // sort will try to compare each random element with a decemal which is close the math.randoms output returning a shuffled array of items\r\n            arr.sort(() => Math.random() - .5);\r\n            // return new array\r\n            return arr\r\n            \r\n\r\n        }\r\n\r\n        console.log(this.state)\r\n        return (\r\n            // create grid layout \r\n            // map over images\r\n            <container>\r\n                {/* create score */}\r\n                <h1>Score:{this.state.clickedImages.length}</h1>\r\n                {/* display game over when true */}\r\n                {this.state.gameOver && <h1>Game Over</h1>}\r\n                <Row className=\"gallery\">\r\n                    {/* {if the game is not over return images */}\r\n                    {!this.state.gameOver &&\r\n                        arrayToDisplay.map(item => {\r\n                            return (\r\n                                // return images\r\n                                // add col size to display number of col bases on size\r\n                                <div className=\"galleryImage\">\r\n                                    {/*  use back tick notation*/}\r\n                                    {/* add onclick function for images being mapped */}\r\n                                    {/* added memory-game to return images on local machine */}\r\n                                    <img src={`/memory-game/Images/${item}`} onClick={() => {\r\n                                        // push item array \r\n                                        // copy state and create new var\r\n                                        // add images to it \r\n                                        // update state\r\n                                        // add if statement to only allow first time clicked images to array\r\n                                        if (this.state.clickedImages.includes(item)) {\r\n\r\n                                            // set new state of score to 0 display game over\r\n                                            let newState = { ...this.state }\r\n                                            newState.gameOver = true\r\n                                            newState.score = 0\r\n                                            this.setState(newState)\r\n\r\n                                        } else {\r\n                                            // push to array\r\n                                            let newState = { ...this.state }\r\n                                            // newState.Score = {this.sts+ 1\r\n                                            newState.clickedImages.push(item)\r\n                                            this.setState(newState)\r\n                                        }\r\n\r\n\r\n\r\n                                    }}></img>\r\n                                </div>\r\n\r\n                            )\r\n                        })}\r\n\r\n                </Row>\r\n            </container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","// Pseudo Code\n// import react from react\n// create components for each element on the page (nav, jumbotron, table, footer)\n// create table/grid 3 col 4 row\n// insert images into table/grid\n// import images as seeds image\n// add event listeners to images\n// randomize images\n// make conditional statements such as if pic id === pic id then loose game score = 0\n// if pic id 1 !== pic id then shuffle images and increment score by 1\n// how the game works\n// create 2 arrays one names clicked\n// if clicked push to array\n// 2nd for loop that iterates through array\n// if image is clicked & image is not array\n// push to clicked array\n// iterate score by 1\n// if image is present in array display game over score = 0\n// delete nav and footer because not in use\n\nimport React from \"react\";\nimport './App.css';\nimport Jumbo from \"./components/Jumbotron/Jumbo\";\nimport Game from \"./components/Game/Game\";\n\n\n// return components onto application\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbo />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}